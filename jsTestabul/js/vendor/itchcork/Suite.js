define("Suite", ['Test', 'benchmark', 'SuiteViewModel', 'knockout', 'ToSource', 'require', 'ace/ext/static_highlight', "ace/mode/javascript", "ace/mode/coffee", "ace/theme/twilight", "ace/lib/dom"], function (Test, Benchmark, sVM, ko, ToSource, require) {
    function suite(desc, jsFunctionOrObject, framework) {
        "use strict";
        var self = this;
        self.vm, self.jsContext;
        self.desc = desc;
        self.jsFunctionOrObject = jsFunctionOrObject;
        self.framework = "itchcork";
        if (framework) {
            self.framework = framework;
        }

        self.setupContextBreakdown = function (context, proto) {
            var jsStr = '', coffeeStr = '', prop, property;

            Object.keys(context).forEach(function (prop) {
                if (context[prop] instanceof Function) {
                    jsStr = context[prop].toString();
                    try {
                        coffeeStr = Js2coffee.build(jsStr);
                        property = { name: (proto ? 'prototype.' : '') + prop + '()', jsStr: self.highlight(jsStr, false), coffeeStr: self.highlight(coffeeStr, true)};
                        self.vm.properties.push(property);
                    } catch (err) {
                        property = { name: (proto ? 'prototype.' : '') + prop + '()', jsStr: self.highlight(jsStr, false), coffeeStr: ''};
                        self.vm.properties.push(property);
                    }

                } else {
                    var objSrc = ToSource(context[prop]);


                    property = {  name: (proto ? 'prototype.' : '') + prop, jsStr: self.highlight(objSrc,false), coffeeStr: self.highlight(Js2coffee.build(prop + ' = ' + objSrc), true)};
                    self.vm.properties.push(property);
                }

            });

            if (!proto && Object.keys(context.__proto__).length > 0) {
                self.setupContextBreakdown(context.__proto__, true);
            }

        };

        self.highlight = function (code, isCoffee) {
            var highlighter = require("ace/ext/static_highlight");
            var theme = require("ace/theme/twilight");
            var dom = require("ace/lib/dom"), highlighted;

            if (isCoffee) {
                var CoffeeMode = require("ace/mode/coffee").Mode;
                highlighted = highlighter.render(code, new CoffeeMode(), theme);
            } else {
                var JavaScriptMode = require("ace/mode/javascript").Mode;
                highlighted = highlighter.render(code, new JavaScriptMode(), theme);
            }
            dom.importCssString(highlighted.css, "ace_highlight");

            return highlighted.html;
        };


        self.map = function () {
            self.vm = new sVM();
            self.vm.suiteDesc(self.desc);

            self.vm.coffeeContextStr('');
            $.get('_src/' + self.desc + '.js',function (jsStr) {
                jsStr = jsStr.replace('\/\/ Generated by CoffeeScript 1.6.3\n', '');
                self.vm.jsContextStr(self.highlight(jsStr, false));
                buildCoffeeSource();
            }).fail(function () {
                    self.vm.jsContextStr(self.highlight(ToSource(self.jsFunctionOrObject), false));
                    buildCoffeeSource();
                });


            var buildCoffeeSource = function () {
                $.get('_src/' + self.desc + '.coffee',function (coffeeStr) {
                    self.vm.coffeeContextStr(self.highlight(coffeeStr, true));
                }).fail(function () {
                        self.vm.coffeeContextStr(self.highlight(Js2coffee.build(self.vm.jsContextStr()),true));
                    });
            };


            if (self.jsFunctionOrObject instanceof Function) {
                self.jsContext = new self.jsFunctionOrObject();
            }
            else
                self.jsContext = self.jsFunctionOrObject;

            self.setupContextBreakdown(self.jsContext, false);

        };

        self.map();


        self.add = function (shouldEqual, func) {
            if (typeof func == 'function') {
                self.addTestWithBenchmarks(shouldEqual, func, null, false, '');
            }
            return self;
        }

        self.currentTest;

        self.it = function (func, shouldBe, describe) {
            self.currentTest = self.addTestWithBenchmarks(shouldBe, func, null, true, describe);

            return self;
        };

        self.shouldBe = function shouldBe(val) {
            self.currentTest.shouldEqual = val;
            self.processTest(self.currentTest);
            return self;
        };

        self.processTest = function (test) {
            if (test.run()) {
                self.vm.passedCount(self.vm.passedCount() + 1);
                if (window.suiteView)
                    window.suiteView.incrementPassedCount();
            } else {
                self.vm.failedCount(self.vm.failedCount() + 1);
                if (window.suiteView)
                    window.suiteView.incrementFailedCount();
            }
            self.vm.tests.push(test);
        }

        self.addTestWithBenchmarks = function (shouldEqual, testFunc, name, defer, describe) {
            var test = new Test(shouldEqual, testFunc, self.jsFunctionOrObject instanceof Function ? new self.jsFunctionOrObject() : self.jsFunctionOrObject, name, describe);
            if (!defer) {
                self.processTest(test);
            }


            if (name) {
                var fn = (function (context, name) {
                    return function () {
                        context[name]();
                    };
                })(self.jsContext, name);
                self.vm.benchmarkSuite.add({
                    'name': test.expression,
                    'fn': fn,
                    'async': true,
                    'queued': true,
                    'minSamples': 100});
            }
            else {
                self.vm.benchmarkSuite.add(test.expression, function () {
                        testFunc(test.context);
                    },
                    { 'async': true, 'queued': true, 'minSamples': 100});
            }


            return test;
        };

        self.shouldEqual = function (shouldEqual) {
            self.shouldEqualValue = shouldEqual;
            return self;
        };

        self.compareBenchmarks = function () {
            var func = function (c, tc) {
                return c[tc]();
            };
            for (var testcase in self.jsContext) {
                if (typeof self.jsContext[testcase] === 'function') {
                    self.addTestWithBenchmarks(self.shouldEqualValue, func, testcase, false, '');
                }
            }
            self.benchmark();

            return self;
        };

        self.benchmark = function () {
            self.vm.benchmarkingEnabled(true);
            self.vm.processBenchmarks();
        };

        if (window.suiteView)
            window.suiteView.add(self);
    };
    return suite;
});
